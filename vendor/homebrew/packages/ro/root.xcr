formula = r"""
class Root < Formula
  desc "Object oriented framework for large scale data analysis"
  homepage "https://root.cern.ch/"
  url "https://root.cern.ch/download/root_v6.22.08.source.tar.gz"
  sha256 "6f061ff6ef8f5ec218a12c4c9ea92665eea116b16e1cd4df4f96f00c078a2f6f"
  license "LGPL-2.1-or-later"
  revision 2
  head "https://github.com/root-project/root.git"

  livecheck do
    url "https://root.cern.ch/download/"
    regex(/href=.*?root[._-]v?(\d+(?:\.\d*[02468])+)\.source\.t/i)
  end

  bottle do
    sha256 arm64_big_sur: "17c9442b2c82a2ba1ce3978a7be33d928ed11696874dd9a7593514d79bedcbf8"
    sha256 big_sur:       "002227927383e2b3361ca8a26b85949f9eaafff657d61cf4bc7aed70dff71e4c"
    sha256 catalina:      "24d53591f952dfdee8d31fd57a468a008fc512cdb3e823ea8b89da01e8c77c17"
    sha256 mojave:        "47f7f1c5c2a3215dfbb127cb96b831e73f22a34a708418b5ebe2575d239f4032"
  end

  depends_on "cmake" => :build
  depends_on "ninja" => :build
  depends_on "cfitsio"
  depends_on "davix"
  depends_on "fftw"
  depends_on "gcc" # for gfortran
  depends_on "gl2ps"
  depends_on "graphviz"
  depends_on "gsl"
  depends_on "lz4"
  depends_on "numpy" # for tmva
  depends_on "openssl@1.1"
  depends_on "pcre"
  depends_on "python@3.9"
  depends_on "tbb"
  depends_on "xrootd"
  depends_on "xz" # for LZMA
  depends_on "zstd"

  uses_from_macos "libxml2"

  conflicts_with "glew", because: "root ships its own copy of glew"

  skip_clean "bin"

  # Can be removed post 6.22.08
  patch do
    url "https://github.com/root-project/root/commit/d113c9fcf7e1d88c573717c676aa4b97f1db2ea2.patch?full_index=1"
    sha256 "6d0fd5ccd92fbb27a949ea40ed4fd60a5e112a418d124ca99f05f70c9df31cda"
  end

  def install
    # Work around "error: no member named 'signbit' in the global namespace"
    ENV.delete("SDKROOT") if DevelopmentTools.clang_build_version >= 900

    # Freetype/afterimage/gl2ps/lz4 are vendored in the tarball, so are fine.
    # However, this is still permitting the build process to make remote
    # connections. As a hack, since upstream support it, we inreplace
    # this file to "encourage" the connection over HTTPS rather than HTTP.
    inreplace "cmake/modules/SearchInstalledSoftware.cmake",
              "http://lcgpackages",
              "https://lcgpackages"

    args = std_cmake_args + %W[
      -DCLING_CXX_PATH=clang++
      -DCMAKE_INSTALL_ELISPDIR=#{elisp}
      -DPYTHON_EXECUTABLE=#{Formula["python@3.9"].opt_bin}/python3
      -Dbuiltin_cfitsio=OFF
      -Dbuiltin_freetype=ON
      -Dbuiltin_glew=ON
      -Ddavix=ON
      -Dfftw3=ON
      -Dfitsio=ON
      -Dfortran=ON
      -Dgdml=ON
      -Dgnuinstall=ON
      -Dimt=ON
      -Dmathmore=ON
      -Dminuit2=ON
      -Dmysql=OFF
      -Dpgsql=OFF
      -Dpyroot=ON
      -Droofit=ON
      -Dssl=ON
      -Dtmva=ON
      -Dxrootd=ON
      -GNinja
    ]

    cxx_version = (MacOS.version < :mojave) ? 14 : 17
    args << "-DCMAKE_CXX_STANDARD=#{cxx_version}"

    # Homebrew now sets CMAKE_INSTALL_LIBDIR to /lib, which is incorrect
    # for ROOT with gnuinstall, so we set it back here.
    args << "-DCMAKE_INSTALL_LIBDIR=lib/root"

    # Workaround the shim directory being embedded into the output
    inreplace "build/unix/compiledata.sh", "`type -path $CXX`", ENV.cxx

    mkdir "builddir" do
      system "cmake", "..", *args

      system "ninja", "install"

      chmod 0755, Dir[bin/"*.*sh"]

      version = Language::Python.major_minor_version Formula["python@3.9"].opt_bin/"python3"
      pth_contents = "import site; site.addsitedir('#{lib}/root')\n"
      (prefix/"lib/python#{version}/site-packages/homebrew-root.pth").write pth_contents
    end
  end

  def caveats
    <<~EOS
      As of ROOT 6.22, you should not need the thisroot scripts; but if you
      depend on the custom variables set by them, you can still run them:

      For bash users:
        . #{HOMEBREW_PREFIX}/bin/thisroot.sh
      For zsh users:
        pushd #{HOMEBREW_PREFIX} >/dev/null; . bin/thisroot.sh; popd >/dev/null
      For csh/tcsh users:
        source #{HOMEBREW_PREFIX}/bin/thisroot.csh
      For fish users:
        . #{HOMEBREW_PREFIX}/bin/thisroot.fish
    EOS
  end

  test do
    (testpath/"test.C").write <<~EOS
      #include <iostream>
      void test() {
        std::cout << "Hello, world!" << std::endl;
      }
    EOS

    # Test ROOT command line mode
    system "#{bin}/root", "-b", "-l", "-q", "-e", "gSystem->LoadAllLibraries(); 0"

    # Test ROOT executable
    assert_equal "\nProcessing test.C...\nHello, world!\n",
                 shell_output("root -l -b -n -q test.C")

    # Test linking
    (testpath/"test.cpp").write <<~EOS
      #include <iostream>
      #include <TString.h>
      int main() {
        std::cout << TString("Hello, world!") << std::endl;
        return 0;
      }
    EOS
    (testpath/"test_compile.bash").write <<~EOS
      $(root-config --cxx) $(root-config --cflags) $(root-config --libs) $(root-config --ldflags) test.cpp
      ./a.out
    EOS
    assert_equal "Hello, world!\n",
                 shell_output("/bin/bash test_compile.bash")

    # Test Python module
    system Formula["python@3.9"].opt_bin/"python3", "-c", "import ROOT; ROOT.gSystem.LoadAllLibraries()"
  end
end

"""

import "homebrew-install" as hi

import "apr" as i0, "apr-util" as i1, "autoconf" as i2, "automake" as i3, "berkeley-db" as i4, "bison" as i5, "brotli" as i6, "bzip2" as i7, "c-ares" as i8, "cairo" as i9, "cfitsio" as i10, "cmake" as i11, "curl" as i12, "cython" as i13, "davix" as i14, "doxygen" as i15, "expat" as i16, "fftw" as i17, "flex" as i18, "fontconfig" as i19, "freetype" as i20, "fribidi" as i21, "gcc" as i22, "gd" as i23, "gdbm" as i24, "gdk-pixbuf" as i25, "gettext" as i26, "ghostscript" as i27, "gl2ps" as i28, "glib" as i29, "gmp" as i30, "gobject-introspection" as i31, "gperf" as i32, "graphite2" as i33, "graphviz" as i34, "groff" as i35, "gsl" as i36, "gts" as i37, "harfbuzz" as i38, "help2man" as i39, "hwloc" as i40, "icu4c" as i41, "isl" as i42, "jasper" as i43, "jbig2dec" as i44, "jemalloc" as i45, "jpeg" as i46, "krb5" as i47, "libev" as i48, "libevent" as i49, "libffi" as i50, "libidn" as i51, "libidn2" as i52, "libmpc" as i53, "libpng" as i54, "libpthread-stubs" as i55, "librsvg" as i56, "libssh2" as i57, "libtiff" as i58, "libtool" as i59, "libunistring" as i60, "libx11" as i61, "libxau" as i62, "libxcb" as i63, "libxdmcp" as i64, "libxext" as i65, "libxml2" as i66, "libxrender" as i67, "libyaml" as i68, "little-cms2" as i69, "lz4" as i70, "lzo" as i71, "m4" as i72, "meson" as i73, "mpdecimal" as i74, "mpfr" as i75, "ncurses" as i76, "netpbm" as i77, "nghttp2" as i78, "ninja" as i79, "numpy" as i80, "open-mpi" as i81, "openblas" as i82, "openjdk" as i83, "openjpeg" as i84, "openldap" as i85, "openssl@1.1" as i86, "pango" as i87, "pcre" as i88, "perl" as i89, "pixman" as i90, "pkg-config" as i91, "psutils" as i92, "python@3.9" as i93, "readline" as i94, "rtmpdump" as i95, "ruby" as i96, "rust" as i97, "scons" as i98, "sphinx-doc" as i99, "sqlite" as i100, "subversion" as i101, "swig" as i102, "tbb" as i103, "texinfo" as i104, "uchardet" as i105, "unzip" as i106, "utf8proc" as i107, "util-macros" as i108, "webp" as i109, "xcb-proto" as i110, "xorgproto" as i111, "xrootd" as i112, "xtrans" as i113, "xz" as i114, "zip" as i115, "zlib" as i116, "zstd" as i117

pkg(
  name: "root",
  version: "6.22.08",
  dependencies: [hi, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i73, i74, i75, i76, i77, i78, i79, i80, i81, i82, i83, i84, i85, i86, i87, i88, i89, i90, i91, i92, i93, i94, i95, i96, i97, i98, i99, i100, i101, i102, i103, i104, i105, i106, i107, i108, i109, i110, i111, i112, i113, i114, i115, i116, i117],

  def install(ctx) {
    ctx.write_file(join(ctx.build, "root.rb"), formula)
    ctx.system("homebrew-install", ctx.prefix, ctx.state_dir, "./root.rb")
  }
)

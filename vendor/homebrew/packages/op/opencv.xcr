formula = r"""
class Opencv < Formula
  desc "Open source computer vision library"
  homepage "https://opencv.org/"
  url "https://github.com/opencv/opencv/archive/4.5.2.tar.gz"
  sha256 "ae258ed50aa039279c3d36afdea5c6ecf762515836b27871a8957c610d0424f8"
  license "Apache-2.0"
  revision 4

  livecheck do
    url :stable
    regex(/^v?(\d+(?:\.\d+)+)$/i)
  end

  bottle do
    sha256 arm64_big_sur: "375216102e8da54922e8b35b171a8a30bc7155a9742ad06f7f8db8d23711fc96"
    sha256 big_sur:       "7efb86f073ed566a8262ec56e3df18bbe2d2bc71b7ce862500df4a3c1df7d740"
    sha256 catalina:      "e79665c5b126fa3369b6fa23e30d93d248c19bd575f17ddad91afb4910e43204"
    sha256 mojave:        "e373ed402a772cf7e02d21c9fdc57f211968e6894438e49d114f1cbac0cf7b5a"
  end

  depends_on "cmake" => :build
  depends_on "pkg-config" => :build
  depends_on "ceres-solver"
  depends_on "eigen"
  depends_on "ffmpeg"
  depends_on "glog"
  depends_on "harfbuzz"
  depends_on "jpeg"
  depends_on "libpng"
  depends_on "libtiff"
  depends_on "numpy"
  depends_on "openblas"
  depends_on "openexr"
  depends_on "protobuf"
  depends_on "python@3.9"
  depends_on "tbb"
  depends_on "vtk"
  depends_on "webp"

  resource "contrib" do
    url "https://github.com/opencv/opencv_contrib/archive/4.5.2.tar.gz"
    sha256 "9f52fd3114ac464cb4c9a2a6a485c729a223afb57b9c24848484e55cef0b5c2a"
  end

  def install
    ENV.cxx11

    resource("contrib").stage buildpath/"opencv_contrib"

    # Avoid Accelerate.framework
    ENV["OpenBLAS_HOME"] = Formula["openblas"].opt_prefix

    # Reset PYTHONPATH, workaround for https://github.com/Homebrew/homebrew-science/pull/4885
    ENV.delete("PYTHONPATH")

    args = std_cmake_args + %W[
      -DCMAKE_OSX_DEPLOYMENT_TARGET=
      -DBUILD_JASPER=OFF
      -DBUILD_JPEG=OFF
      -DBUILD_OPENEXR=OFF
      -DBUILD_PERF_TESTS=OFF
      -DBUILD_PNG=OFF
      -DBUILD_PROTOBUF=OFF
      -DBUILD_TESTS=OFF
      -DBUILD_TIFF=OFF
      -DBUILD_WEBP=OFF
      -DBUILD_ZLIB=OFF
      -DBUILD_opencv_hdf=OFF
      -DBUILD_opencv_java=OFF
      -DBUILD_opencv_text=ON
      -DOPENCV_ENABLE_NONFREE=ON
      -DOPENCV_EXTRA_MODULES_PATH=#{buildpath}/opencv_contrib/modules
      -DOPENCV_GENERATE_PKGCONFIG=ON
      -DPROTOBUF_UPDATE_FILES=ON
      -DWITH_1394=OFF
      -DWITH_CUDA=OFF
      -DWITH_EIGEN=ON
      -DWITH_FFMPEG=ON
      -DWITH_GPHOTO2=OFF
      -DWITH_GSTREAMER=OFF
      -DWITH_JASPER=OFF
      -DWITH_OPENEXR=ON
      -DWITH_OPENGL=OFF
      -DWITH_QT=OFF
      -DWITH_TBB=ON
      -DWITH_VTK=ON
      -DBUILD_opencv_python2=OFF
      -DBUILD_opencv_python3=ON
      -DPYTHON3_EXECUTABLE=#{Formula["python@3.9"].opt_bin}/python3
    ]

    if Hardware::CPU.intel?
      args << "-DENABLE_AVX=OFF" << "-DENABLE_AVX2=OFF"
      args << "-DENABLE_SSE41=OFF" << "-DENABLE_SSE42=OFF" unless MacOS.version.requires_sse42?
    end

    mkdir "build" do
      os = "mac"
      on_linux do
        os = "linux"
      end
      system "cmake", "..", *args
      inreplace "modules/core/version_string.inc", "#{HOMEBREW_SHIMS_PATH}/#{os}/super/", ""
      system "make"
      system "make", "install"
      system "make", "clean"
      system "cmake", "..", "-DBUILD_SHARED_LIBS=OFF", *args
      inreplace "modules/core/version_string.inc", "#{HOMEBREW_SHIMS_PATH}/#{os}/super/", ""
      system "make"
      lib.install Dir["lib/*.a"]
      lib.install Dir["3rdparty/**/*.a"]
    end
  end

  test do
    (testpath/"test.cpp").write <<~EOS
      #include <opencv2/opencv.hpp>
      #include <iostream>
      int main() {
        std::cout << CV_VERSION << std::endl;
        return 0;
      }
    EOS
    system ENV.cxx, "-std=c++11", "test.cpp", "-I#{include}/opencv4",
                    "-o", "test"
    assert_equal `./test`.strip, version.to_s

    output = shell_output(Formula["python@3.9"].opt_bin/"python3 -c 'import cv2; print(cv2.__version__)'")
    assert_equal version.to_s, output.chomp
  end
end

"""

import "homebrew-install" as hi

import "aom" as i0, "asciidoc" as i1, "asciidoctor" as i2, "autoconf" as i3, "autoconf-archive" as i4, "automake" as i5, "bdw-gc" as i6, "berkeley-db" as i7, "bison" as i8, "boost" as i9, "brotli" as i10, "bzip2" as i11, "c-ares" as i12, "cairo" as i13, "cargo-c" as i14, "ceres-solver" as i15, "cmake" as i16, "curl" as i17, "cython" as i18, "dav1d" as i19, "docbook" as i20, "docbook-xsl" as i21, "double-conversion" as i22, "doxygen" as i23, "eigen" as i24, "expat" as i25, "ffmpeg" as i26, "flac" as i27, "flex" as i28, "fontconfig" as i29, "freetype" as i30, "frei0r" as i31, "fribidi" as i32, "gcc" as i33, "gdbm" as i34, "gettext" as i35, "gflags" as i36, "giflib" as i37, "gl2ps" as i38, "glew" as i39, "glib" as i40, "glog" as i41, "gmp" as i42, "gnu-getopt" as i43, "gnu-sed" as i44, "gnutls" as i45, "gobject-introspection" as i46, "gperf" as i47, "graphite2" as i48, "guile" as i49, "harfbuzz" as i50, "hdf5" as i51, "help2man" as i52, "icu4c" as i53, "imath" as i54, "isl" as i55, "jemalloc" as i56, "jpeg" as i57, "jsoncpp" as i58, "krb5" as i59, "lame" as i60, "leptonica" as i61, "libass" as i62, "libatomic_ops" as i63, "libbluray" as i64, "libev" as i65, "libevent" as i66, "libffi" as i67, "libgcrypt" as i68, "libgit2" as i69, "libgpg-error" as i70, "libidn2" as i71, "libmetalink" as i72, "libmpc" as i73, "libogg" as i74, "libpng" as i75, "libpthread-stubs" as i76, "libsamplerate" as i77, "libsndfile" as i78, "libsodium" as i79, "libsoxr" as i80, "libssh2" as i81, "libtasn1" as i82, "libtiff" as i83, "libtool" as i84, "libunistring" as i85, "libvidstab" as i86, "libvorbis" as i87, "libvpx" as i88, "libx11" as i89, "libxau" as i90, "libxcb" as i91, "libxdmcp" as i92, "libxext" as i93, "libxml2" as i94, "libxrender" as i95, "libxslt" as i96, "libyaml" as i97, "little-cms2" as i98, "lz4" as i99, "lzo" as i100, "m4" as i101, "meson" as i102, "metis" as i103, "mpdecimal" as i104, "mpfr" as i105, "nasm" as i106, "ncurses" as i107, "netcdf" as i108, "nettle" as i109, "nghttp2" as i110, "ninja" as i111, "numpy" as i112, "openblas" as i113, "opencore-amr" as i114, "openexr" as i115, "openjpeg" as i116, "openldap" as i117, "openssl@1.1" as i118, "opus" as i119, "p11-kit" as i120, "pcre" as i121, "perl" as i122, "pixman" as i123, "pkg-config" as i124, "protobuf" as i125, "pugixml" as i126, "pyqt-builder" as i127, "pyqt@5" as i128, "python@3.7" as i129, "python@3.8" as i130, "python@3.9" as i131, "qt@5" as i132, "rav1e" as i133, "readline" as i134, "rtmpdump" as i135, "rubberband" as i136, "ruby" as i137, "rust" as i138, "sdl2" as i139, "sip" as i140, "six" as i141, "snappy" as i142, "source-highlight" as i143, "speex" as i144, "sphinx-doc" as i145, "sqlite" as i146, "srt" as i147, "suite-sparse" as i148, "swig" as i149, "szip" as i150, "tbb" as i151, "tcl-tk" as i152, "tesseract" as i153, "theora" as i154, "unbound" as i155, "unzip" as i156, "utf8cpp" as i157, "util-macros" as i158, "vtk" as i159, "webp" as i160, "x264" as i161, "x265" as i162, "xcb-proto" as i163, "xmlto" as i164, "xorgproto" as i165, "xtrans" as i166, "xvid" as i167, "xz" as i168, "yasm" as i169, "zeromq" as i170, "zimg" as i171, "zip" as i172, "zlib" as i173, "zstd" as i174

pkg(
  name: "opencv",
  version: "4.5.2",
  dependencies: [hi, i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i73, i74, i75, i76, i77, i78, i79, i80, i81, i82, i83, i84, i85, i86, i87, i88, i89, i90, i91, i92, i93, i94, i95, i96, i97, i98, i99, i100, i101, i102, i103, i104, i105, i106, i107, i108, i109, i110, i111, i112, i113, i114, i115, i116, i117, i118, i119, i120, i121, i122, i123, i124, i125, i126, i127, i128, i129, i130, i131, i132, i133, i134, i135, i136, i137, i138, i139, i140, i141, i142, i143, i144, i145, i146, i147, i148, i149, i150, i151, i152, i153, i154, i155, i156, i157, i158, i159, i160, i161, i162, i163, i164, i165, i166, i167, i168, i169, i170, i171, i172, i173, i174],

  def install(ctx) {
    ctx.write_file(join(ctx.build, "opencv.rb"), formula)
    ctx.system("homebrew-install", ctx.prefix, ctx.state_dir, "./opencv.rb")
  }
)

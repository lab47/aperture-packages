import fetch

version = "1.15.2"

bootstrap = None

if True {
  bootstrap = fetch.archive(
    url: "https://storage.googleapis.com/golang/go1.7.darwin-amd64.tar.gz",
    sum: ("etag", "c328b91e29deebc8edc76a955b1e3a59"),
  )
} else {
  bootstrap = fetch.archive(
    url: "https://storage.googleapis.com/golang/go1.7.linux-amd64.tar.gz",
    sum: ("etag", "1504d5efe8e90dd0fde11521ed951081"),
  )
}

pkg(
  name: "go",
  version: version,
  input: inputs(
    source: fetch.archive(
      url: "https://dl.google.com/go/go"+version+".src.tar.gz",
      sum: ("etag", "6f147c"),
    ),
    gobootstrap: bootstrap,
  )

  def install(ctx) {
    libexec = ctx.prefix+"/libexec"
    bin = ctx.prefix+"/bin"

    ctx.set_env("GOROOT_BOOTSTRAP", ctx.build+"/gobootstrap/go")
    ctx.set_env("GOROOT_FINAL", libexec)
    ctx.set_env("GOOS", "darwin")
    ctx.set_env("GOCACHE", ctx.build+"/cache")

    ctx.system("./make.bash", "--no-clean", dir: "source/go/src")

    ctx.rm_rf("pkg/obj")
    ctx.rm_rf("gobootstrap")

    ctx.install_files(target: libexec, pattern: "source/go/*")
    ctx.install_files(target: bin, pattern: libexec+"/bin/go*", symlink: True)

    ctx.system(bin+"/go", "install", "-race", "std")

    ctx.prepend_env("PATH", bin)
    ctx.set_env("GOPATH", ctx.build)
  }

)

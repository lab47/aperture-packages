import fetch, cmake, luarocks, "pkg-config" as pc, gettext

import libtermkey, libuv, libvterm, unibilium, msgpack, luajit

pkg(
  name: "neovim"
  version: "0.4.4"
  input: inputs(
    neovim: fetch.archive(
      url: "https://github.com/neovim/neovim/archive/v0.4.4.tar.gz",
      sum: ("etag", "92863858cdb750df7e4ec7d9ab48f67e746943532391f9fbb315cead4b0dc33c"),
    ),
    mpack: fetch.archive(
      url: "https://github.com/libmpack/libmpack-lua/releases/download/1.0.7/libmpack-lua-1.0.7.tar.gz",
      sum: ("sha256", "68565484a3441d316bd51bed1cacd542b7f84b1ecfd37a8bd18dd0f1a20887e8")
    ),
    lpeg: fetch.url(
      url: "https://luarocks.org/manifests/gvvaughan/lpeg-1.0.2-1.src.rock",
      sum: ("sha256", "e0d0d687897f06588558168eeb1902ac41a11edd1b58f1aa61b99d0ea0abbfbc"),
      path: "lpeg-1.0.2-1.src.rock"
    ),
    inspect: fetch.url(
      url: "https://luarocks.org/manifests/kikito/inspect-3.1.1-0.src.rock",
      sum: ("sha256", "ea1f347663cebb523e88622b1d6fe38126c79436da4dbf442674208aa14a8f4c"),
      path: "inspect-3.1.1-0.src.rock"
    ),
    # "lua-compat-5.3" do
    lua_compat: fetch.archive(
      url: "https://github.com/keplerproject/lua-compat-5.3/archive/v0.7.tar.gz"
      sum: ("sha256", "bec3a23114a3d9b3218038309657f0f506ad10dfbc03bb54e91da7e5ffdba0a2")
    ),
    luv: fetch.archive(
      url: "https://github.com/luvit/luv/releases/download/1.30.0-0/luv-1.30.0-0.tar.gz",
      sum: ("sha256", "5cc75a012bfa9a5a1543d0167952676474f31c2d7fd8d450b56d8929dbebb5ef")
    )
  )
  dependencies: [
    cmake, luarocks, pc, gettext,
    libtermkey, libuv, libvterm, luajit, msgpack, unibilium,
  ]

  def install(ctx) {
    ctx.set_root("neovim")
    ctx.prepend_env("LUA_PATH", ctx.build+"/deps-build/share/lua/5.1/?.lua")
    ctx.prepend_env("LUA_CPATH", ctx.build+"/deps-build/lib/lua/5.1/?.so")

    ctx.shell("""
    mkdir -p deps-build/build/src
    mv ../../luv ./deps-build/build/src
    mv ../../lua_compat ./deps-build/build/src/lua-compat-5.3
    """)

    tree = join(ctx.build, "deps-build")

    ctx.system("luarocks", "unpack", "--lua-dir="+luajit.prefix, "--tree="+tree,
      join(ctx.top, "lpeg", "lpeg-1.0.2-1.src.rock"), dir: "deps-build")
    ctx.system("luarocks", "make", "--lua-dir="+luajit.prefix, "--tree="+tree, dir: "deps-build/lpeg-1.0.2-1/lpeg-1.0.2")

    ctx.system("luarocks", "unpack", "--lua-dir="+luajit.prefix, "--tree="+tree,
      join(ctx.top, "inspect", "inspect-3.1.1-0.src.rock"), dir: "deps-build")

    ctx.system("luarocks", "make", "--lua-dir="+luajit.prefix, "--tree="+tree, dir: "deps-build/inspect-3.1.1-0/inspect.lua-3.1.1")

    ctx.system("luarocks", "unpack", "--lua-dir="+luajit.prefix, "--tree="+tree, join(ctx.top, "mpack/libmpack-lua-1.0.7/mpack-1.0.7-0.rockspec"), dir: "deps-build")
    ctx.system("luarocks", "make", "--lua-dir="+luajit.prefix, "--tree="+tree, dir: "deps-build/mpack-1.0.7-0/libmpack-lua-1.0.7")

    compat = join(ctx.build, "deps-build/build/src/lua-compat-5.3/lua-compat-5.3-0.7")
    luv_prefix = join(ctx.build, "deps-build")

    ctx.chdir("deps-build/build/src/luv/luv-1.30.0-0", => {
      args = [
          "-DLUA_BUILD_TYPE=System",
          "-DWITH_SHARED_LIBUV=ON",
          "-DBUILD_SHARED_LIBS=OFF",
          "-DBUILD_MODULE=OFF",
          "-DLUA_COMPAT53_DIR="+compat,
        ]

      cmake.cmake(ctx, extra: args, prefix: luv_prefix)
      ctx.system("make", "install")
    })

    ctx.mkdir("build")

    top = ctx.build

    ctx.chdir("build", => {
      args = [
        "--debug-find",
        "-DLIBLUV_INCLUDE_DIR="+join(top, "deps-build/include"),
        "-DLIBLUV_LIBRARY="+join(top, "deps-build/lib/libluv.a"),
        "-DLibIntl_INCLUDE_DIR="+join(gettext.prefix, "include"),
        "-DLibIntl_LIBRARY="+join(gettext.prefix, "lib/libintl.dylib"),
        "-DLUAJIT_LIBRARY="+join(luajit.prefix, "lib", "libluajit-5.1.dylib"),
        "-DLUAJIT_INCLUDE_DIR="+join(luajit.prefix, "include", "luajit-2.0"),
      ]

      cmake.cmake(ctx, extra: args, target: "..")
      ctx.system("make", "install")
    })
  }
)
